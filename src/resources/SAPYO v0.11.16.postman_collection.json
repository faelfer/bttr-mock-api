{
	"info": {
		"_postman_id": "0a6b62eb-c72c-4397-a832-bce1c1a21c32",
		"name": "SAPYO v0.11.16",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6558341"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto usuário\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"TOKEN_AUTH\", \"Token \" + responseJson.token);",
									"    pm.environment.set(\"USER_EMAIL\", responseJson.user.email);",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Elemento response não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('token', 'user', 'message');",
									"    pm.expect(responseJson.user, 'Elemento user não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('first_name', 'last_name', 'email', 'user_type', 'area', 'role', 'profile_picture');",
									"    pm.expect(responseJson.user.area, 'Elemento user.area não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('id', 'name');",
									"    pm.expect(responseJson.user.role, 'Elemento user.role não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('id', 'name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto usuário\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.token, 'o valor da propriedade token não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user, 'o valor da propriedade user não é do tipo objeto').to.be.a(\"object\");",
									"    pm.expect(responseJson.user.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.user_type, 'o valor da propriedade user_type não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.user.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.user.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.role, 'o valor da propriedade role não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.user.role.id, 'o valor da propriedade role.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.user.role.name, 'o valor da propriedade role.name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.profile_picture, 'o valor da propriedade profile_picture não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"pedro.lima@deway.com.br\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/sign_in",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"marina@hotmail.com\",\n    \"password\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/sign_in",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"sign_in"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-J0r4mYAa5bRUNHuZJHPePeTZJ00\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Jan 2023 16:10:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"usuário não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"pedro.lima@deway.com.br\",\n    \"password\": \"45613\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/sign_in",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"sign_in"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "35"
								},
								{
									"key": "ETag",
									"value": "W/\"23-wWohltWZ2o47kCpMkrxW/rUo8GA\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Jan 2023 16:11:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"senha incorreta.\"\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"{{USER_EMAIL}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/forgot_password",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"forgot_password"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"email\": \"FASDFASDF\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/forgot_password",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"forgot_password"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-J0r4mYAa5bRUNHuZJHPePeTZJ00\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Jan 2023 16:14:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"usuário não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto usuário\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"USER_EMAIL\", responseJson.user.email);",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.user, 'Elemento user não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('first_name', 'last_name', 'email', 'user_type', 'area', 'role', 'profile_picture');",
									"    pm.expect(responseJson.user.area, 'Elemento area não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('id', 'name');",
									"    pm.expect(responseJson.user.role, 'Elemento role não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('id', 'name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto usuário\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.user, 'o valor da propriedade user não é do tipo objeto').to.be.a(\"object\");",
									"    pm.expect(responseJson.user.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.user_type, 'o valor da propriedade user_type não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.user.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.user.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.role, 'o valor da propriedade role não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.user.role.id, 'o valor da propriedade role.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.user.role.name, 'o valor da propriedade role.name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.user.profile_picture, 'o valor da propriedade profile_picture não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/profile",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/users/profile",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:55:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						}
					]
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "text"
								},
								{
									"key": "area_id",
									"value": "{{AREA_ID}}",
									"type": "text"
								},
								{
									"key": "role_id",
									"value": "{{$randomJobTitle}}",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/users/profile",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "area",
											"value": "",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/profile",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Jan 2023 19:49:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "area",
											"value": "{{AREA_ID}}",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/profile",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:56:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "membro1@yahoo.com",
											"type": "text"
										},
										{
											"key": "area",
											"value": "{{AREA_ID}}",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/profile",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-JjxLvbWBEP8dbyL4FcTQR9hXRLc\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 17:01:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro com e-mail já existente.\"\n}"
						}
					]
				},
				{
					"name": "Redefine Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"hjbznidr\",\n    \"new_password\": \"{{$randomAlphaNumeric}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/change_password",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"change_password"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"hjbznidr\",\n    \"new_password\": \"{{$randomAlphaNumeric}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/change_password",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"change_password"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-C6kbgH722SzmcvJaweioZX1Iuow\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Jan 2023 19:40:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"senha preenchida é incorreta.\"\n}"
						},
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"hjbznidr\",\n    \"new_password\": \"{{$randomAlphaNumeric}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/change_password",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"change_password"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 17:28:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Area",
			"item": [
				{
					"name": "Create Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"{{$randomBsNoun}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/areas/create_area",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"areas",
								"create_area"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"{{$randomBsNoun}}\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/create_area",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"create_area"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:14:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"Administração\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/create_area",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"create_area"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-8w76GSPgM6RkRpPRQSPRYdJ85pc\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:12:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Areas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object')",
									"    function checkObjectProperties(area, index, array) {",
									"        pm.expect(area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.areas).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === (array.length) - 1) {",
									"            pm.environment.set(\"AREA_ID\", item.id);",
									"            pm.environment.set(\"AREA_NAME\", item.name);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo object').to.be.a(\"string\");",
									"    }",
									"    (responseJson.areas).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/areas/all_areas",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"areas",
								"all_areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Areas By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"    function checkObjectProperties(area, index, array) {",
									"        pm.expect(area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'roles');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === (array.length) - 1) {",
									"            pm.environment.set(\"AREA_ID\", item.id);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.roles, 'o valor da propriedade name não é do tipo array').to.be.a(\"array\");",
									"    }",
									"    (responseJson.results).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/areas/areas_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"areas",
								"areas_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Area By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('area');",
									"",
									"    pm.expect(responseJson.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.area, 'O valor retornado não é do tipo array').to.be.an(\"object\");",
									"",
									"    pm.expect(responseJson.area.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.area.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/areas/area_by_id?area_id={{AREA_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"areas",
								"area_by_id"
							],
							"query": [
								{
									"key": "area_id",
									"value": "{{AREA_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/areas/area_by_id?area_id=11",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"area_by_id"
									],
									"query": [
										{
											"key": "area_id",
											"value": "11"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-20++eRHrN4gwgI3lzf22PVgs/1o\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:15:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Update Area By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"area_id\": \"{{AREA_ID}}\",\n    \"name\": \"{{$randomBsNoun}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/areas/update_area_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"areas",
								"update_area_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"area_id\": \"{{AREA_ID}}\",\n    \"name\": \"{{$randomBsNoun}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/update_area_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"update_area_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:16:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"area_id\": \"11\",\n    \"name\": \"{{$randomBsNoun}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/update_area_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"update_area_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:17:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"area_id\": \"{{AREA_ID}}\",\n    \"name\": \"Administração\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/update_area_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"update_area_by_id"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-8w76GSPgM6RkRpPRQSPRYdJ85pc\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:17:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Delete Meeting By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"area_id\": {{AREA_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/areas/delete_area_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"areas",
								"delete_area_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"area_id\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/delete_area_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"delete_area_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:18:19 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"area_id\": \"11\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/delete_area_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"delete_area_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Jan 2023 18:18:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Member",
			"item": [
				{
					"name": "Create Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "text"
								},
								{
									"key": "area_id",
									"value": "{{AREA_ID}}",
									"type": "text"
								},
								{
									"key": "role_id",
									"value": "{{ROLE_ID}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{$randomAlphaNumeric}}",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/users/create_member",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"create_member"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "area",
											"value": "5",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{$randomAlphaNumeric}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/create_member",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"create_member"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:41:55 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "pedro.lima@deway.com.br",
											"type": "text"
										},
										{
											"key": "area",
											"value": "{{AREA_ID}}",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{$randomAlphaNumeric}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/create_member",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"create_member"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-JjxLvbWBEP8dbyL4FcTQR9hXRLc\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:40:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro com e-mail já existente.\"\n}"
						}
					]
				},
				{
					"name": "Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('members');",
									"",
									"    function checkObjectProperties(member, index, array) {",
									"        pm.expect(member, 'membro não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name', 'email', 'area', 'role', 'profile_picture');",
									"        pm.expect(member.area, 'membro.area não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(member.role, 'membro.role não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.members).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.members, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === (array.length) -1) {",
									"            pm.environment.set(\"MEMBER_ID\", item.id);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.role, 'o valor da propriedade role não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.role.id, 'o valor da propriedade role.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.role.name, 'o valor da propriedade role.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.profile_picture, 'o valor da propriedade profile_picture não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.members).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/members",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"members"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/users/members",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"members"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 17:30:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						}
					]
				},
				{
					"name": "Members By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkObjectProperties(member, index, array) {",
									"        pm.expect(member, 'membro não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name', 'email', 'area', 'role', 'profile_picture');",
									"        pm.expect(member.area, 'membro.area não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(member.role, 'membro.role não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === (array.length) -1) {",
									"            pm.environment.set(\"MEMBER_ID\", item.id);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.role, 'o valor da propriedade role não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.role.id, 'o valor da propriedade role.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.role.name, 'o valor da propriedade role.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.profile_picture, 'o valor da propriedade profile_picture não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/members_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"members_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/users/members_by_page?page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"members_by_page"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 19 Jan 2023 11:53:53 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Member By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'membro não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('member');",
									"",
									"    pm.expect(responseJson.member, 'membro não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name', 'email', 'area', 'role', 'profile_picture');",
									"",
									"    pm.expect(responseJson.member.area, 'membro.area não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"    pm.expect(responseJson.member.role, 'membro.role não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto membro\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson.member.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.member.first_name, 'o valor da propriedade first_name não é do tipo object').to.be.a(\"string\");",
									"    pm.expect(responseJson.member.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.member.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.member.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.member.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.member.area.name, 'o valor da propriedade area.id não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.member.role, 'o valor da propriedade role não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.member.role.id, 'o valor da propriedade role.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.member.role.name, 'o valor da propriedade role.id não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.member.profile_picture, 'o valor da propriedade profile_picture não é do tipo number').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/member_by_id?member_id={{MEMBER_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"member_by_id"
							],
							"query": [
								{
									"key": "member_id",
									"value": "{{MEMBER_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/users/member_by_id?member_id={{MEMBER_ID}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"member_by_id"
									],
									"query": [
										{
											"key": "member_id",
											"value": "{{MEMBER_ID}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:43:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/users/member_by_id?member_id=4626722",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"member_by_id"
									],
									"query": [
										{
											"key": "member_id",
											"value": "4626722"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "ETag",
									"value": "W/\"2e-bApCv7IITpimt58UQFZ6Qr/vGIY\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:44:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Update Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "text"
								},
								{
									"key": "area_id",
									"value": "{{AREA_ID}}",
									"type": "text"
								},
								{
									"key": "role_id",
									"value": "{{$randomJobTitle}}",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
								},
								{
									"key": "member_id",
									"value": "{{MEMBER_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/users/update_member_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"update_member_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "area",
											"value": "{{AREA_ID}}",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										},
										{
											"key": "member_id",
											"value": "{{MEMBER_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/update_member_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"update_member_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:47:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "area",
											"value": "{{AREA_ID}}",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										},
										{
											"key": "member_id",
											"value": "63627272",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/update_member_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"update_member_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "ETag",
									"value": "W/\"2e-bApCv7IITpimt58UQFZ6Qr/vGIY\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:50:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "area",
											"value": "5",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										},
										{
											"key": "member_id",
											"value": "{{MEMBER_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/update_member_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"update_member_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:51:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "pedro.lima@deway.com.br",
											"type": "text"
										},
										{
											"key": "area",
											"value": "{{AREA_ID}}",
											"type": "text"
										},
										{
											"key": "role",
											"value": "{{$randomJobTitle}}",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/home/rafael/Imagens/variety-copied-wallpaper-37117853a157063900baf10c29e2b5ff.jpg"
										},
										{
											"key": "member_id",
											"value": "{{MEMBER_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/users/update_member_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"update_member_by_id"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-JjxLvbWBEP8dbyL4FcTQR9hXRLc\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 17:35:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro com e-mail já existente.\"\n}"
						}
					]
				},
				{
					"name": "Delete Member By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"member_id\":  \"{{MEMBER_ID}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/delete_member_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"delete_member_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"member_id\":  \"{{MEMBER_ID}}\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/delete_member_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"delete_member_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:53:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"member_id\":  \"123434\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users/delete_member_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"delete_member_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "ETag",
									"value": "W/\"2e-bApCv7IITpimt58UQFZ6Qr/vGIY\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 16:53:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro não foi encontrado.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Role",
			"item": [
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": {{AREA_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/roles/create_role",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"roles",
								"create_role"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/areas/create_area",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"areas",
										"create_area"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:23:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": 99\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/create_role",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"create_role"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-20++eRHrN4gwgI3lzf22PVgs/1o\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:28:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/create_role",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"create_role"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-gSB03ij3jih6tAbH6Ko3uH37HRQ\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:35:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"cargo com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object')",
									"    function checkObjectProperties(role, index, array) {",
									"        pm.expect(role, 'cargo não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'area');",
									"        pm.expect(role.area, 'role.area não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.roles).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === (array.length) - 1) {",
									"            pm.environment.set(\"ROLE_ID\", item.id);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo object').to.be.a(\"string\");",
									"    }",
									"    (responseJson.roles).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/roles/all_roles",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"roles",
								"all_roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object')",
									"    pm.expect(responseJson.role, 'role não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'area');",
									"    pm.expect(responseJson.role.area, 'role.area não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'Response não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.role, 'Propriedade role não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.role.id, 'o valor da propriedade role.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.role.name, 'o valor da propriedade role.name não é do tipo object').to.be.a(\"string\");",
									"    pm.expect(responseJson.role.area, 'o valor da propriedade role.area não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.role.area.id, 'o valor da propriedade role.area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.role.area.name, 'o valor da propriedade role.area.name não é do tipo object').to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/roles/role_by_id?role_id={{ROLE_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"roles",
								"role_by_id"
							],
							"query": [
								{
									"key": "role_id",
									"value": "{{ROLE_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/roles/role_by_id?role_id=99",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"role_by_id"
									],
									"query": [
										{
											"key": "role_id",
											"value": "99"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-20++eRHrN4gwgI3lzf22PVgs/1o\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:50:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Update Role By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role_id\": {{ROLE_ID}},\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": {{AREA_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/roles/update_role_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"roles",
								"update_role_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": {{ROLE_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/update_role_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"update_role_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:55:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role_id\": 123,\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/update_role_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"update_role_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-KyFTQCEOMU8reUoEION438YeRb0\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:57:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"cargo não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role_id\": {{ROLE_ID}},\n    \"name\": \"{{$randomBsNoun}}\",\n    \"area_id\": 123\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/update_role_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"update_role_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:58:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role_id\": {{ROLE_ID}},\n    \"name\": \"Chefe de Operações\",\n    \"area_id\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/update_role_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"update_role_by_id"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-8w76GSPgM6RkRpPRQSPRYdJ85pc\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 14:58:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Delete Role By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"role_id\": {{ROLE_ID}} }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/roles/delete_role_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"roles",
								"delete_role_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"role_id\": {{ROLE_ID}} }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/delete_role_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"delete_role_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 15:01:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"role_id\": 123 }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/roles/delete_role_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"roles",
										"delete_role_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-KyFTQCEOMU8reUoEION438YeRb0\""
								},
								{
									"key": "Date",
									"value": "Thu, 02 Feb 2023 15:02:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"cargo não foi encontrada.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Meeting",
			"item": [
				{
					"name": "Create Meeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"meeting_type\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"            \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"            \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"            \"place\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\"),",
									"            \"coordinator\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"secretary\": pm.environment.get('MEMBER_ID'),",
									"            \"area\": pm.environment.get('AREA_ID'),",
									"            \"participants\": [pm.environment.get('MEMBER_ID')],",
									"            \"guests\": [pm.variables.replaceIn(\"{{$randomEmail}}\")],",
									"            \"subjects\": [",
									"                {",
									"                    \"description\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"                    \"responsible\": pm.environment.get('MEMBER_ID'),",
									"                    \"duration\": \"13:45\"",
									"                }",
									"            ]",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/meetings/create_meeting",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"create_meeting"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"type\": \"{{$randomCatchPhrase}}\",\n      \"start_date\": \"{{$randomDateRecent}}\",\n      \"end_date\": \"{{$randomDateFuture}}\",\n      \"place\": \"{{$randomStreetAddress}}\",\n      \"coordinator\": {{MEMBER_ID}},\n      \"secretary\": {{MEMBER_ID}},\n      \"area\": {{AREA_ID}},\n      \"participants\": [{{MEMBER_ID}}],\n      \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/create_meeting",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"create_meeting"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:30:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"type\": \"{{$randomCatchPhrase}}\",\n      \"start_date\": \"{{$randomDateRecent}}\",\n      \"end_date\": \"{{$randomDateFuture}}\",\n      \"place\": \"{{$randomStreetAddress}}\",\n      \"coordinator\": {{MEMBER_ID}},\n      \"secretary\": {{MEMBER_ID}},\n      \"area\": 5,\n      \"participants\": [{{MEMBER_ID}}],\n      \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/create_meeting",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"create_meeting"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:30:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/create_meeting",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"create_meeting"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-hcr8rIiy+pq/xdb4/OxZ8XO8vg0\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 09:57:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"coordenador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/create_meeting",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"create_meeting"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-yLfvA5URmX15U9Sp85SlIJbRvvY\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 09:58:10 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"secretário não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Meetings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('meetings');",
									"",
									"    function checkParticipantProperties(participant, index, array) {",
									"        pm.expect(participant, 'participante não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"",
									"    function checkGuestProperties(guest, index, array) {",
									"        pm.expect(guest, 'convidado não é do tipo object').to.be.an('object').to.include.all.keys('id', 'email');",
									"    }",
									"",
									"    function checkSubjectProperties(subject, index, array) {",
									"        pm.expect(subject, 'assunto não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('description', 'responsible', 'duration');",
									"    }",
									"",
									"    function checkMeetingProperties(meeting, index, array) {",
									"        pm.expect(meeting, 'reunião não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'meeting_type', 'start_date', 'end_date', 'place', 'coordinator', 'secretary', 'area', 'participants', 'guests', 'subjects');",
									"        pm.expect(meeting.coordinator, 'coordenador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(meeting.secretary, 'secretário não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(meeting.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"        (meeting.participants).forEach(checkParticipantProperties);",
									"        (meeting.guests).forEach(checkGuestProperties);",
									"        (meeting.subjects).forEach(checkSubjectProperties);",
									"    }",
									"    ",
									"    (responseJson.meetings).forEach(checkMeetingProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.meetings, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkParticipantTypes(participant, index, array) {",
									"        pm.expect(participant.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(participant.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(participant.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkSubjectTypes(subject, index, array) {",
									"        pm.expect(subject.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(subject.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(subject.duration, 'o valor da propriedade duration não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkGuestsTypes(guest, index, array) {",
									"        pm.expect(guest.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(guest.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkMeetingTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"MEETING_ID\", item.id);",
									"            pm.environment.set(\"MEETING_TYPE\", item.meeting_type);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.meeting_type, 'o valor da propriedade meeting_type não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.place, 'o valor da propriedade place não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.coordinator, 'o valor da propriedade coordinator não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.coordinator.id, 'o valor da propriedade coordinator.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.coordinator.first_name, 'o valor da propriedade coordinator.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.coordinator.last_name, 'o valor da propriedade coordinator.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.secretary, 'o valor da propriedade secretary não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.secretary.id, 'o valor da propriedade secretary.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.secretary.first_name, 'o valor da propriedade secretary.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.secretary.last_name, 'o valor da propriedade secretary.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.participants, 'o valor da propriedade participants não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.guests, 'o valor da propriedade guests não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.subjects, 'o valor da propriedade subjects não é do tipo array').to.be.a(\"array\");",
									"",
									"        (item.participants).forEach(checkParticipantTypes);",
									"        (item.subjects).forEach(checkSubjectTypes);",
									"        (item.guests).forEach(checkGuestsTypes);",
									"    }",
									"    (responseJson.meetings).forEach(checkMeetingTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/meetings/meetings_by_user",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"meetings_by_user"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/meetings",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:08:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						}
					]
				},
				{
					"name": "Meetings By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkParticipantProperties(participant, index, array) {",
									"        pm.expect(participant, 'participante não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"",
									"    function checkGuestProperties(guest, index, array) {",
									"        pm.expect(guest, 'convidado não é do tipo object').to.be.an('object').to.include.all.keys('id', 'email');",
									"    }",
									"",
									"    function checkSubjectProperties(subject, index, array) {",
									"        pm.expect(subject, 'assunto não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('description', 'responsible', 'duration');",
									"    }",
									"",
									"    function checkMeetingProperties(meeting, index, array) {",
									"        pm.expect(meeting, 'reunião não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'meeting_type', 'start_date', 'end_date', 'place', 'coordinator', 'secretary', 'area', 'participants', 'guests', 'subjects');",
									"        pm.expect(meeting.coordinator, 'coordenador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(meeting.secretary, 'secretário não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(meeting.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"        (meeting.participants).forEach(checkParticipantProperties);",
									"        (meeting.guests).forEach(checkGuestProperties);",
									"        (meeting.subjects).forEach(checkSubjectProperties);",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkMeetingProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkParticipantTypes(participant, index, array) {",
									"        pm.expect(participant.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(participant.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(participant.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkSubjectTypes(subject, index, array) {",
									"        pm.expect(subject.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(subject.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(subject.duration, 'o valor da propriedade duration não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkGuestsTypes(guest, index, array) {",
									"        pm.expect(guest.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(guest.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkMeetingTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"MEETING_ID\", item.id);",
									"            pm.environment.set(\"MEETING_TYPE\", item.meeting_type);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.meeting_type, 'o valor da propriedade meeting_type não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.place, 'o valor da propriedade place não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.coordinator, 'o valor da propriedade coordinator não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.coordinator.id, 'o valor da propriedade coordinator.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.coordinator.first_name, 'o valor da propriedade coordinator.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.coordinator.last_name, 'o valor da propriedade coordinator.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.secretary, 'o valor da propriedade secretary não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.secretary.id, 'o valor da propriedade secretary.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.secretary.first_name, 'o valor da propriedade secretary.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.secretary.last_name, 'o valor da propriedade secretary.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.participants, 'o valor da propriedade participants não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.guests, 'o valor da propriedade guests não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.subjects, 'o valor da propriedade subjects não é do tipo array').to.be.a(\"array\");",
									"",
									"        (item.participants).forEach(checkParticipantTypes);",
									"        (item.subjects).forEach(checkSubjectTypes);",
									"        (item.guests).forEach(checkGuestsTypes);",
									"    }",
									"    (responseJson.results).forEach(checkMeetingTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/meetings/meetings_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"meetings_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/meetings/meetings_by_page?page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"meetings_by_page"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 19 Jan 2023 13:24:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Meetings By Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkParticipantProperties(participant, index, array) {",
									"        pm.expect(participant, 'participante não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"",
									"    function checkGuestProperties(guest, index, array) {",
									"        pm.expect(guest, 'convidado não é do tipo object').to.be.an('object').to.include.all.keys('id', 'email');",
									"    }",
									"",
									"    function checkSubjectProperties(subject, index, array) {",
									"        pm.expect(subject, 'assunto não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('description', 'responsible', 'duration');",
									"    }",
									"",
									"    function checkMeetingProperties(meeting, index, array) {",
									"        pm.expect(meeting, 'reunião não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'meeting_type', 'start_date', 'end_date', 'place', 'coordinator', 'secretary', 'area', 'participants', 'guests', 'subjects');",
									"        pm.expect(meeting.coordinator, 'coordenador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(meeting.secretary, 'secretário não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(meeting.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"        (meeting.participants).forEach(checkParticipantProperties);",
									"        (meeting.guests).forEach(checkGuestProperties);",
									"        (meeting.subjects).forEach(checkSubjectProperties);",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkMeetingProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reuniões\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkParticipantTypes(participant, index, array) {",
									"        pm.expect(participant.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(participant.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(participant.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkSubjectTypes(subject, index, array) {",
									"        pm.expect(subject.description, 'o valor da propriedade description não é do tipo number').to.be.a(\"string\");",
									"        pm.expect(subject.responsible, 'o valor da propriedade responsible não é do tipo string').to.be.a(\"object\");",
									"        pm.expect(subject.duration, 'o valor da propriedade duration não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkGuestsTypes(guest, index, array) {",
									"        pm.expect(guest.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(guest.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkMeetingTypes(item, index, array) {",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.meeting_type, 'o valor da propriedade meeting_type não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.place, 'o valor da propriedade place não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.coordinator, 'o valor da propriedade coordinator não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.coordinator.id, 'o valor da propriedade coordinator.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.coordinator.first_name, 'o valor da propriedade coordinator.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.coordinator.last_name, 'o valor da propriedade coordinator.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.secretary, 'o valor da propriedade secretary não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.secretary.id, 'o valor da propriedade secretary.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.secretary.first_name, 'o valor da propriedade secretary.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.secretary.last_name, 'o valor da propriedade secretary.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.participants, 'o valor da propriedade participants não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.guests, 'o valor da propriedade guests não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.subjects, 'o valor da propriedade subjects não é do tipo array').to.be.a(\"array\");",
									"",
									"        (item.participants).forEach(checkParticipantTypes);",
									"        (item.subjects).forEach(checkSubjectTypes);",
									"        (item.guests).forEach(checkGuestsTypes);",
									"    }",
									"    (responseJson.results).forEach(checkMeetingTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/meetings/meetings_by_search?text={{MEETING_TYPE}}&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"meetings_by_search"
							],
							"query": [
								{
									"key": "text",
									"value": "{{MEETING_TYPE}}"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/meetings/meetings_by_search?text=a&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"meetings_by_search"
									],
									"query": [
										{
											"key": "text",
											"value": "a"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 19 Jan 2023 15:41:41 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Meeting By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('meeting');",
									"",
									"    function checkParticipantProperties(participant, index, array) {",
									"        pm.expect(participant, 'participante não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"",
									"    function checkGuestProperties(guest, index, array) {",
									"        pm.expect(guest, 'convidado não é do tipo object').to.be.an('object').to.include.all.keys('id', 'email');",
									"    }",
									"",
									"    function checkSubjectProperties(subject, index, array) {",
									"        pm.expect(subject, 'assunto não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('description', 'responsible', 'duration');",
									"    }",
									"",
									"    pm.expect(responseJson.meeting, 'reunião não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'meeting_type', 'start_date', 'end_date', 'place', 'coordinator', 'secretary', 'area', 'participants', 'guests', 'subjects');",
									"    pm.expect(responseJson.meeting.coordinator, 'coordenador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    pm.expect(responseJson.meeting.secretary, 'secretário não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    pm.expect(responseJson.meeting.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"    (responseJson.meeting.participants).forEach(checkParticipantProperties);",
									"    (responseJson.meeting.guests).forEach(checkGuestProperties);",
									"    (responseJson.meeting.subjects).forEach(checkSubjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.meeting, 'O valor retornado não é do tipo array').to.be.an(\"object\");",
									"",
									"    function checkParticipantTypes(participant, index, array) {",
									"        pm.expect(participant.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(participant.first_name, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(participant.last_name, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkSubjectTypes(subject, index, array) {",
									"        pm.expect(subject.description, 'o valor da propriedade description não é do tipo number').to.be.a(\"string\");",
									"        pm.expect(subject.responsible, 'o valor da propriedade responsible não é do tipo string').to.be.a(\"object\");",
									"        pm.expect(subject.duration, 'o valor da propriedade duration não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkGuestsTypes(guest, index, array) {",
									"        pm.expect(guest.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(guest.email, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    pm.expect(responseJson.meeting.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.meeting.meeting_type, 'o valor da propriedade meeting_type não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.place, 'o valor da propriedade place não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.coordinator, 'o valor da propriedade coordinator não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.meeting.coordinator.id, 'o valor da propriedade coordinator.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.meeting.coordinator.first_name, 'o valor da propriedade coordinator.first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.coordinator.last_name, 'o valor da propriedade coordinator.last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.secretary, 'o valor da propriedade secretary não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.meeting.secretary.id, 'o valor da propriedade secretary.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.meeting.secretary.first_name, 'o valor da propriedade secretary.first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.secretary.last_name, 'o valor da propriedade secretary.last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.meeting.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.meeting.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.meeting.participants, 'o valor da propriedade participants não é do tipo array').to.be.a(\"array\");",
									"    pm.expect(responseJson.meeting.guests, 'o valor da propriedade guests não é do tipo array').to.be.a(\"array\");",
									"    pm.expect(responseJson.meeting.subjects, 'o valor da propriedade subjects não é do tipo array').to.be.a(\"array\");",
									"",
									"    (responseJson.meeting.participants).forEach(checkParticipantTypes);",
									"    (responseJson.meeting.subjects).forEach(checkSubjectTypes);",
									"    (responseJson.meeting.guests).forEach(checkGuestsTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/meetings/meeting_by_id?meeting_id={{MEETING_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"meeting_by_id"
							],
							"query": [
								{
									"key": "meeting_id",
									"value": "{{MEETING_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/meetings/meeting_by_id?meeting_id={{MEETING_ID}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"meeting_by_id"
									],
									"query": [
										{
											"key": "meeting_id",
											"value": "{{MEETING_ID}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:41:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/meetings/meeting_by_id?meeting_id=35456",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"meeting_by_id"
									],
									"query": [
										{
											"key": "meeting_id",
											"value": "35456"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-nVKtN/JLqMDjtDWhWnzDqCiwZDs\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:42:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"reunião não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Update Meeting By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"meeting_id\": pm.variables.get(\"MEETING_ID\"),",
									"            \"meeting_type\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"            \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"            \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"            \"place\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\"),",
									"            \"coordinator\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"secretary\": pm.environment.get('MEMBER_ID'),",
									"            \"area\": pm.environment.get('AREA_ID'),",
									"            \"participants\": [pm.environment.get('MEMBER_ID')],",
									"            \"guests\": [pm.variables.replaceIn(\"{{$randomEmail}}\")],",
									"            \"subjects\": [",
									"                {",
									"                    \"description\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"                    \"responsible\": pm.environment.get('MEMBER_ID'),",
									"                    \"duration\": \"13:45\"",
									"                }",
									"            ]",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/meetings/update_meeting_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"update_meeting_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": {{MEETING_ID}},\n    \"type\": \"{{$randomCatchPhrase}}\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"place\": \"{{$randomStreetAddress}}\",\n    \"coordinator\": {{MEMBER_ID}},\n    \"secretary\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}},\n    \"participants\": [{{MEMBER_ID}}],\n    \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:46:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": 12235,\n    \"type\": \"{{$randomCatchPhrase}}\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"place\": \"{{$randomStreetAddress}}\",\n    \"coordinator\": {{MEMBER_ID}},\n    \"secretary\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}},\n    \"participants\": [{{MEMBER_ID}}],\n    \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-w4dg14dSeSePLohXKQpLdqRZthk\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:47:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"reunião não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": {{MEETING_ID}},\n    \"type\": \"{{$randomCatchPhrase}}\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"place\": \"{{$randomStreetAddress}}\",\n    \"coordinator\": {{MEMBER_ID}},\n    \"secretary\": {{MEMBER_ID}},\n    \"area\": 5,\n    \"participants\": [{{MEMBER_ID}}],\n    \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:48:41 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-hcr8rIiy+pq/xdb4/OxZ8XO8vg0\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:03:50 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"coordenador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-yLfvA5URmX15U9Sp85SlIJbRvvY\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:04:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"secretário não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Delete Meeting By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"meeting_id\": {{MEETING_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/meetings/delete_meeting_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"meetings",
								"delete_meeting_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": {{MEMBER_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/delete_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"delete_meeting_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:58:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": 121334\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/delete_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"delete_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "ETag",
									"value": "W/\"2e-bApCv7IITpimt58UQFZ6Qr/vGIY\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:59:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro não foi encontrado.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Decision",
			"item": [
				{
					"name": "Create Decision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"description\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"            \"responsible_id\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"situation\": \"NÃO INICIADA\",",
									"            \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/decisions/create_decision",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"create_decision"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/decisions/create_decision",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"create_decision"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 16:35:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/decisions/create_decision",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"create_decision"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-CbJfYPsfKWJwOmTWQcp/2wJKfaU\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 16:36:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"responsável não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Decisions By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"",
									"    function checkDecisionProperties(decision, index, array) {",
									"        pm.expect(decision, 'decisão não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'description', 'situation', 'end_date', 'responsible');",
									"        pm.expect(decision.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkDecisionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkDecisionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"DECISION_ID\", item.id);",
									"            pm.environment.set(\"DECISION_DESCRIPTION\", item.description);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkDecisionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/decisions/decisions_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"decisions_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decisions_by_page?page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decisions_by_page"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 17:03:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Decisions By Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"",
									"    function checkDecisionProperties(decision, index, array) {",
									"        pm.expect(decision, 'decisão não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'description', 'situation', 'end_date', 'responsible');",
									"        pm.expect(decision.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkDecisionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkDecisionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"DECISION_ID\", item.id);",
									"            pm.environment.set(\"DECISION_DESCRIPTION\", item.description);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkDecisionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/decisions/decisions_by_search?text=website&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"decisions_by_search"
							],
							"query": [
								{
									"key": "text",
									"value": "website"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decisions_by_search?text=website&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decisions_by_search"
									],
									"query": [
										{
											"key": "text",
											"value": "website"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 17:03:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Decisions By Situation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"",
									"    function checkDecisionProperties(decision, index, array) {",
									"        pm.expect(decision, 'decisão não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'description', 'situation', 'end_date', 'responsible');",
									"        pm.expect(decision.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkDecisionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkDecisionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"DECISION_ID\", item.id);",
									"            pm.environment.set(\"DECISION_DESCRIPTION\", item.description);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkDecisionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/decisions/decisions_by_situation?situation=NÃO INICIADA&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"decisions_by_situation"
							],
							"query": [
								{
									"key": "situation",
									"value": "NÃO INICIADA"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decisions_by_situation?situation=NÃO INICIADA&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decisions_by_situation"
									],
									"query": [
										{
											"key": "situation",
											"value": "NÃO INICIADA"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 17:17:10 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Decisions By Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"",
									"    function checkDecisionProperties(decision, index, array) {",
									"        pm.expect(decision, 'decisão não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'description', 'situation', 'end_date', 'responsible');",
									"        pm.expect(decision.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkDecisionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkDecisionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"DECISION_ID\", item.id);",
									"            pm.environment.set(\"DECISION_DESCRIPTION\", item.description);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkDecisionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/decisions/decisions_by_date?date_start=2023-03-01T03:00:00.000Z&date_end=2023-03-31T03:00:00.000Z&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"decisions_by_date"
							],
							"query": [
								{
									"key": "date_start",
									"value": "2023-03-01T03:00:00.000Z"
								},
								{
									"key": "date_end",
									"value": "2023-03-31T03:00:00.000Z"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decisions_by_date?date_start=2023-03-01T03:00:00.000Z&date_end=2023-03-31T03:00:00.000Z&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decisions_by_date"
									],
									"query": [
										{
											"key": "date_start",
											"value": "2023-03-01T03:00:00.000Z"
										},
										{
											"key": "date_end",
											"value": "2023-03-31T03:00:00.000Z"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 18:28:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Decision By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('decision');",
									"",
									"    pm.expect(responseJson.decision, 'decisão não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'description', 'situation', 'end_date', 'responsible');",
									"    pm.expect(responseJson.decision.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.decision, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"",
									"    pm.expect(responseJson.decision.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.decision.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.decision.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.decision.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.decision.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.decision.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.decision.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.decision.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/decisions/decision_by_id?decision_id={{DECISION_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"decision_by_id"
							],
							"query": [
								{
									"key": "decision_id",
									"value": "{{DECISION_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decision_by_id?decision_id={{DECISION_ID}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decision_by_id"
									],
									"query": [
										{
											"key": "decision_id",
											"value": "{{DECISION_ID}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 17:08:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decision_by_id?decision_id=999",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decision_by_id"
									],
									"query": [
										{
											"key": "decision_id",
											"value": "999"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-gzr8DTBRxC/ecIqBKPm59zYZM14\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 17:09:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"decisão não foi encontrada.\"\n}"
						}
					]
				},
				{
					"name": "Update Meeting By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"decision_id\":  pm.variables.get(\"DECISION_ID\"),",
									"            \"description\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"            \"responsible_id\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"situation\": \"CANCELADO\",",
									"            \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/decisions/update_decision_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"update_decision_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": {{MEETING_ID}},\n    \"type\": \"{{$randomCatchPhrase}}\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"place\": \"{{$randomStreetAddress}}\",\n    \"coordinator\": {{MEMBER_ID}},\n    \"secretary\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}},\n    \"participants\": [{{MEMBER_ID}}],\n    \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:46:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": 12235,\n    \"type\": \"{{$randomCatchPhrase}}\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"place\": \"{{$randomStreetAddress}}\",\n    \"coordinator\": {{MEMBER_ID}},\n    \"secretary\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}},\n    \"participants\": [{{MEMBER_ID}}],\n    \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-w4dg14dSeSePLohXKQpLdqRZthk\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:47:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"reunião não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meeting_id\": {{MEETING_ID}},\n    \"type\": \"{{$randomCatchPhrase}}\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"place\": \"{{$randomStreetAddress}}\",\n    \"coordinator\": {{MEMBER_ID}},\n    \"secretary\": {{MEMBER_ID}},\n    \"area\": 5,\n    \"participants\": [{{MEMBER_ID}}],\n    \"guests\": [\"{{$randomEmail}}\"],\n      \"subjects\": [\n        {\n            \"description\": \"{{$randomCatchPhrase}}\",\n            \"responsible\": {{MEMBER_ID}},\n            \"duration\": \"13:45\"\n        }\n      ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 18:48:41 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-hcr8rIiy+pq/xdb4/OxZ8XO8vg0\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:03:50 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"coordenador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/meetings/update_meeting_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"meetings",
										"update_meeting_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "ETag",
									"value": "W/\"33-yLfvA5URmX15U9Sp85SlIJbRvvY\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:04:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"secretário não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Delete Meeting By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"decision_id\": {{DECISION_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/decisions/delete_decision_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"delete_decision_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"decision_id\": {{DECISION_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/decisions/delete_decision_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"delete_decision_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 19:20:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"decision_id\": 999\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/decisions/delete_decision_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"delete_decision_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-gzr8DTBRxC/ecIqBKPm59zYZM14\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 19:20:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"decisão não foi encontrada.\"\n}"
						}
					]
				},
				{
					"name": "Decisions PDF By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/decisions/decisions_pdf_by_id?decisions_id[]={{DECISION_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"decisions",
								"decisions_pdf_by_id"
							],
							"query": [
								{
									"key": "decisions_id[]",
									"value": "{{DECISION_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/decisions/decisions_pdf_by_id?decisions_id[]=999",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"decisions",
										"decisions_pdf_by_id"
									],
									"query": [
										{
											"key": "decisions_id[]",
											"value": "999"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-gzr8DTBRxC/ecIqBKPm59zYZM14\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Mar 2023 19:42:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"decisão não foi encontrada.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Pendency",
			"item": [
				{
					"name": "Create Pendency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"description\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"            \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"            \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"            \"responsible\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"situation\": \"NÃO INICIADA\",",
									"            \"observation\": pm.variables.replaceIn(\"{{$randomLoremSentences}}\"),",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/pendencies/create_pendency",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"pendencies",
								"create_pendency"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhraseNoun}}\",\n    \"responsible\": 234567891,\n    \"situation\": \"NÃO INICIADA\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"observation\": \"{{$randomLoremSentences}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/create_pendency",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"create_pendency"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:14:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/create_pendency",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"create_pendency"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-CbJfYPsfKWJwOmTWQcp/2wJKfaU\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:10:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"responsável não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Pendencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('pendencies');",
									"",
									"    function checkObjectProperties(pendency, index, array) {",
									"        pm.expect(pendency, 'pendência não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('description', 'responsible', 'situation', 'start_date', 'end_date', 'observation', 'id');",
									"        pm.expect(pendency.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"    ",
									"    (responseJson.pendencies).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto pendências\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.pendencies, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"PENDENCY_ID\", item.id);",
									"            pm.environment.set(\"PENDENCY_DESCRIPTION\", item.description);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.pendencies).forEach(checkObjectTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/pendencies/pendencies_by_user",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"pendencies",
								"pendencies_by_user"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/pendencies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:07:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						}
					]
				},
				{
					"name": "Pendencies By Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('pendencies');",
									"",
									"    function checkObjectProperties(pendency, index, array) {",
									"        pm.expect(pendency, 'pendência não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('description', 'responsible', 'situation', 'start_date', 'end_date', 'observation', 'id');",
									"        pm.expect(pendency.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    }",
									"    ",
									"    (responseJson.pendencies).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto pendências\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.pendencies, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.pendencies).forEach(checkObjectTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/pendencies/pendencies_by_search?text={{PENDENCY_DESCRIPTION}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"pendencies",
								"pendencies_by_search"
							],
							"query": [
								{
									"key": "text",
									"value": "{{PENDENCY_DESCRIPTION}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/pendencies/pendencies_by_search?text={{PENDENCY_DESCRIPTION}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"pendencies_by_search"
									],
									"query": [
										{
											"key": "text",
											"value": "{{PENDENCY_DESCRIPTION}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:19:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Pendency By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'pendência não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('pendency');",
									"",
									"    pm.expect(responseJson.pendency, 'level não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'description', 'responsible', 'situation', 'start_date', 'end_date', 'observation');",
									"    ",
									"    pm.expect(responseJson.pendency.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto pendência\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson.pendency.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.pendency.description, 'o valor da propriedade description não é do tipo object').to.be.a(\"string\");",
									"    pm.expect(responseJson.pendency.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.pendency.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.pendency.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.pendency.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.pendency.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.pendency.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.pendency.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.pendency.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/pendencies/pendency_by_id?pendency_id={{PENDENCY_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"pendencies",
								"pendency_by_id"
							],
							"query": [
								{
									"key": "pendency_id",
									"value": "{{PENDENCY_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/pendencies/pendency_by_id?pendency_id={{PENDENCY_ID}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"pendency_by_id"
									],
									"query": [
										{
											"key": "pendency_id",
											"value": "{{PENDENCY_ID}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:16:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/pendencies/pendency_by_id?pendency_id=23455",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"pendency_by_id"
									],
									"query": [
										{
											"key": "pendency_id",
											"value": "23455"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "50"
								},
								{
									"key": "ETag",
									"value": "W/\"32-qIoMLskWHxeR22+K6WueqM6RFis\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:17:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"pendência não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Update Pendency By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"pendency_id\": pm.variables.get(\"PENDENCY_ID\"),",
									"            \"description\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
									"            \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"            \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"            \"responsible\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"situation\": \"NÃO INICIADA\",",
									"            \"observation\": pm.variables.replaceIn(\"{{$randomLoremSentences}}\"),",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/pendencies/update_pendency_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"pendencies",
								"update_pendency_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pendency_id\": {{PENDENCY_ID}},\n    \"description\": \"{{$randomCatchPhraseNoun}}\",\n    \"responsible\": {{MEMBER_ID}},\n    \"situation\": \"EM ANDAMENTO\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"observation\": \"{{$randomLoremSentences}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/update_pendency_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"update_pendency_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:20:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pendency_id\": 32663,\n    \"description\": \"{{$randomCatchPhraseNoun}}\",\n    \"responsible\": {{MEMBER_ID}},\n    \"situation\": \"EM ANDAMENTO\",\n    \"start_date\": \"{{$randomDateRecent}}\",\n    \"end_date\": \"{{$randomDateFuture}}\",\n    \"observation\": \"{{$randomLoremSentences}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/update_pendency_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"update_pendency_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "50"
								},
								{
									"key": "ETag",
									"value": "W/\"32-qIoMLskWHxeR22+K6WueqM6RFis\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:25:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"pendência não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/update_pendency_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"update_pendency_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-CbJfYPsfKWJwOmTWQcp/2wJKfaU\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:14:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"responsável não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Delete Pendency By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pendency_id\": {{PENDENCY_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/pendencies/delete_pendency_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"pendencies",
								"delete_pendency_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pendency_id\": {{PENDENCY_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/delete_pendency_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"delete_pendency_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:30:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pendency_id\": 12345\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/pendencies/delete_pendency_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"pendencies",
										"delete_pendency_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "ETag",
									"value": "W/\"2e-bApCv7IITpimt58UQFZ6Qr/vGIY\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:30:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"membro não foi encontrado.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Indicator",
			"item": [
				{
					"name": "Create Indicator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"name\": pm.variables.replaceIn(\"{{$randomLoremWord}}\"),",
									"            \"unit_measurement\": \"R$\",",
									"            \"criterion\": \"MAIOR QUE\",",
									"            \"responsible\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"area\": pm.variables.get(\"AREA_ID\"),",
									"            \"goals\": [",
									"                {",
									"                    \"goal\": pm.variables.replaceIn(\"{{$randomInt}}\"),",
									"                    \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"                    \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"                }",
									"            ],",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/indicators/create_indicator",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"create_indicator"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"unit_measurement\": \"R$\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/create_indicator",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"create_indicator"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:38:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"unit_measurement\": \"R$\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/create_indicator",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"create_indicator"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:44:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/create_indicator",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"create_indicator"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-CbJfYPsfKWJwOmTWQcp/2wJKfaU\""
								},
								{
									"key": "Date",
									"value": "Mon, 09 Jan 2023 10:23:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"responsável não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"labore doloremque\",\n    \"unit_measurement\": \"R$\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/create_indicator",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"create_indicator"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-q3tztcnQBlikiVOW0FZ1rCX7dU8\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:40:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Indicators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('indicators');",
									"",
									"    function checkGoalProperties(goal, index, array) {",
									"        pm.expect(goal, 'meta não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('goal', 'start_date', 'end_date');",
									"    }",
									"",
									"    function checkObjectProperties(indicator, index, array) {",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id');",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"        (indicator.goals).forEach(checkGoalProperties);",
									"    }",
									"    ",
									"    (responseJson.indicators).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto indicador\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.indicators, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkGoalTypes(goal, index, array) {",
									"        pm.expect(goal.goal, 'o valor da propriedade goal não é do tipo number').to.be.a(\"string\");",
									"        pm.expect(goal.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(goal.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        console.log(item)",
									"        if (index === 0) {",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"",
									"        (item.goals).forEach(checkGoalTypes);",
									"    }",
									"    (responseJson.indicators).forEach(checkObjectTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/indicators/indicators_by_user",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"indicators_by_user"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/indicators",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:32:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						}
					]
				},
				{
					"name": "Indicators By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkObjectProperties(indicator, index, array) {",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id');",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === (array.length) -1) {",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);",
									"        }",
									"",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.sublevels, 'o valor da propriedade sublevels não é do tipo array').to.be.a(\"array\");",
									"    }",
									"    (responseJson.results).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/indicators/indicators_by_page?page=1&ordering=created",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"indicators_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "ordering",
									"value": "created"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Indicator By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('indicator');",
									"",
									"    function checkGoalProperties(goal, index, array) {",
									"        pm.expect(goal, 'meta não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('goal', 'start_date', 'end_date');",
									"    }",
									"",
									"    pm.expect(responseJson.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'id');",
									"    pm.expect(responseJson.indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    pm.expect(responseJson.indicator.area, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"",
									"    (responseJson.indicator.goals).forEach(checkGoalProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto indicador\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.indicator, 'O valor retornado não é do tipo array').to.be.an(\"object\");",
									"",
									"    function checkGoalTypes(goal, index, array) {",
									"        pm.expect(goal.goal, 'o valor da propriedade goal não é do tipo number').to.be.a(\"string\");",
									"        pm.expect(goal.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(goal.end_date, 'o valor da propriedade end_date não é do tipo string').to.be.a(\"string\");",
									"    }",
									"",
									"    pm.expect(responseJson.indicator.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.indicator.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.indicator.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.indicator.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");",
									"    pm.expect(responseJson.indicator.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.indicator.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.indicator.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.indicator.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.indicator.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.indicator.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.indicator.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.indicator.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"",
									"    (responseJson.indicator.goals).forEach(checkGoalTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/indicators/indicator_by_id?indicator_id={{INDICATOR_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"indicator_by_id"
							],
							"query": [
								{
									"key": "indicator_id",
									"value": "{{INDICATOR_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/indicators/indicator_by_id?indicator_id={{INDICATOR_ID}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"indicator_by_id"
									],
									"query": [
										{
											"key": "indicator_id",
											"value": "{{INDICATOR_ID}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:47:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/indicators/indicator_by_id?indicator_id=23435",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"indicator_by_id"
									],
									"query": [
										{
											"key": "indicator_id",
											"value": "23435"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-HbV/nZ9qZMsTAL2K+Kknpmfr/tc\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:47:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicator não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Create Sublevel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"parent_id\": pm.variables.get(\"INDICATOR_ID\"),",
									"            \"name\": pm.variables.replaceIn(\"{{$randomLoremWord}}\"),",
									"            \"responsible\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"goals\": [",
									"                {",
									"                    \"goal\": pm.variables.replaceIn(\"{{$randomInt}}\"),",
									"                    \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"                    \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"                }",
									"            ],",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/indicators/create_sublevel",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"create_sublevel"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/create_sublevel",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"create_sublevel"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Tue, 24 Jan 2023 16:41:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/create_sublevel",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"create_sublevel"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-q3tztcnQBlikiVOW0FZ1rCX7dU8\""
								},
								{
									"key": "Date",
									"value": "Tue, 24 Jan 2023 16:44:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Update Sublevel By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"indicator_id\": pm.variables.replaceIn(\"{{SUBLEVEL_ID}}\"),",
									"            \"name\": pm.variables.replaceIn(\"{{$randomBankAccountName}}\"),",
									"            \"responsible\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"goals\": [",
									"                {",
									"                    \"goal\": pm.variables.replaceIn(\"{{$randomInt}}\"),",
									"                    \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"                    \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"                }",
									"            ],",
									"            \"parent_id\": pm.variables.replaceIn(\"{{INDICATOR_ID}}\"),",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/indicators/update_sublevel_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"update_sublevel_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_sublevel_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_sublevel_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Tue, 24 Jan 2023 17:30:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_sublevel_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_sublevel_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-Cg06b4PXBHSCK/buIwyO7NJwabE\""
								},
								{
									"key": "Date",
									"value": "Tue, 24 Jan 2023 17:32:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_sublevel_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_sublevel_by_id"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-q3tztcnQBlikiVOW0FZ1rCX7dU8\""
								},
								{
									"key": "Date",
									"value": "Tue, 24 Jan 2023 17:32:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Update Indicator By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify(",
									"        {",
									"            \"indicator_id\": pm.variables.replaceIn(\"{{INDICATOR_ID}}\"),",
									"            \"name\": pm.variables.replaceIn(\"{{$randomBankAccountName}}\"),",
									"            \"unit_measurement\": \"R$\",",
									"            \"criterion\": \"MAIOR QUE\",",
									"            \"responsible\": pm.variables.get(\"MEMBER_ID\"),",
									"            \"area\": pm.variables.get(\"AREA_ID\"),",
									"            \"goals\": [",
									"                {",
									"                    \"goal\": pm.variables.replaceIn(\"{{$randomInt}}\"),",
									"                    \"start_date\": new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")),",
									"                    \"end_date\": new Date(pm.variables.replaceIn(\"{{$randomDateFuture}}\")),",
									"                }",
									"            ],",
									"        }",
									"    ),",
									"    options: {",
									"        raw: {",
									"            language: \"json\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.request.body.update(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/indicators/update_indicator_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"update_indicator_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indicator_id\": {{INDICATOR_ID}},\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"unit_measurement\": \"QUANTIDADE\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_indicator_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_indicator_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:50:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indicator_id\": 234255,\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"unit_measurement\": \"QUANTIDADE\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_indicator_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_indicator_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-Cg06b4PXBHSCK/buIwyO7NJwabE\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:51:29 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indicator_id\": {{INDICATOR_ID}},\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"unit_measurement\": \"QUANTIDADE\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_indicator_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_indicator_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:51:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indicator_id\": {{INDICATOR_ID}},\n    \"name\": \"labore doloremque\",\n    \"unit_measurement\": \"QUANTIDADE\",\n    \"goals\": [\n        {\n            \"goal\": \"{{$randomInt}}\",\n            \"start_date\": \"{{$randomDateRecent}}\",\n            \"end_date\": \"{{$randomDateFuture}}\"\n        }\n    ],\n    \"criterion\": \"MAIOR QUE\",\n    \"responsible\": {{MEMBER_ID}},\n    \"area\": {{AREA_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/update_indicator_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"update_indicator_by_id"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-q3tztcnQBlikiVOW0FZ1rCX7dU8\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:54:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Delete Indicator By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"indicator_id\": {{INDICATOR_ID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/indicators/delete_indicator_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"indicators",
								"delete_indicator_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indicator_id\": {{INDICATOR_ID}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/delete_indicator_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"delete_indicator_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:55:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indicator_id\": 22435\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/indicators/delete_indicator_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"indicators",
										"delete_indicator_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-Cg06b4PXBHSCK/buIwyO7NJwabE\""
								},
								{
									"key": "Date",
									"value": "Fri, 06 Jan 2023 19:59:20 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador não foi encontrado.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Notifications By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkObjectProperties(notification, index, array) {",
									"        pm.expect(notification, 'notificação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'message', 'user', 'created');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"NOTIFICATION_MESSAGE\", item.message);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.message, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.user, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"object\");",
									"        pm.expect(item.created, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/notifications/notifications_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"notifications",
								"notifications_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notifications By Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('notifications');",
									"",
									"    function checkObjectProperties(notification, index, array) {",
									"        pm.expect(notification, 'notificação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'message', 'user', 'created');",
									"    }",
									"    ",
									"    (responseJson.notifications).forEach(checkObjectProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.notifications, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkObjectTypes(item, index, array) {",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.message, 'o valor da propriedade first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.user, 'o valor da propriedade last_name não é do tipo string').to.be.a(\"object\");",
									"        pm.expect(item.created, 'o valor da propriedade email não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.notifications).forEach(checkObjectTypes);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/notifications/notifications_by_search?text={{NOTIFICATION_MESSAGE}}&page=2",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"notifications",
								"notifications_by_search"
							],
							"query": [
								{
									"key": "text",
									"value": "{{NOTIFICATION_MESSAGE}}"
								},
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Action",
			"item": [
				{
					"name": "Actions By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkActionProperties(action, index, array) {",
									"        pm.expect(action, 'plano de ação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'situation', 'start_date', 'end_dates', 'cause', 'reasons', 'cause_root', 'observation', 'responsible', 'area', 'indicator', 'files');",
									"        pm.expect(action.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(action.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(action.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkActionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkActionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"ACTION_ID\", item.id);",
									"            pm.environment.set(\"ACTION_NAME\", item.name);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_dates, 'o valor da propriedade end_dates não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause, 'o valor da propriedade cause não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.reasons, 'o valor da propriedade reasons não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause_root, 'o valor da propriedade cause_root não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkActionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/actions_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"actions_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_by_page?page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_by_page"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:41:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Actions By Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkActionProperties(action, index, array) {",
									"        pm.expect(action, 'plano de ação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'situation', 'start_date', 'end_dates', 'cause', 'reasons', 'cause_root', 'observation', 'responsible', 'area', 'indicator', 'files');",
									"        pm.expect(action.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(action.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(action.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkActionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkActionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"ACTION_ID\", item.id);",
									"            pm.environment.set(\"ACTION_NAME\", item.name);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_dates, 'o valor da propriedade end_dates não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause, 'o valor da propriedade cause não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.reasons, 'o valor da propriedade reasons não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause_root, 'o valor da propriedade cause_root não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkActionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/actions_by_search?text=a&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"actions_by_search"
							],
							"query": [
								{
									"key": "text",
									"value": "a"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_by_search?text=a&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_by_search"
									],
									"query": [
										{
											"key": "text",
											"value": "a"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:42:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Actions By Situation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkActionProperties(action, index, array) {",
									"        pm.expect(action, 'plano de ação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'situation', 'start_date', 'end_dates', 'cause', 'reasons', 'cause_root', 'observation', 'responsible', 'area', 'indicator', 'files');",
									"        pm.expect(action.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(action.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(action.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkActionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkActionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"ACTION_ID\", item.id);",
									"            pm.environment.set(\"ACTION_NAME\", item.name);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_dates, 'o valor da propriedade end_dates não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause, 'o valor da propriedade cause não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.reasons, 'o valor da propriedade reasons não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause_root, 'o valor da propriedade cause_root não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkActionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/actions_by_situation?situation=NÃO INICIADA&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"actions_by_situation"
							],
							"query": [
								{
									"key": "situation",
									"value": "NÃO INICIADA"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_by_situation?situation=NÃO INICIADA&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_by_situation"
									],
									"query": [
										{
											"key": "situation",
											"value": "NÃO INICIADA"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Wed, 15 Feb 2023 18:26:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Actions By Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkActionProperties(action, index, array) {",
									"        pm.expect(action, 'plano de ação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'situation', 'start_date', 'end_dates', 'cause', 'reasons', 'cause_root', 'observation', 'responsible', 'area', 'indicator', 'files');",
									"        pm.expect(action.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(action.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(action.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkActionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkActionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"ACTION_ID\", item.id);",
									"            pm.environment.set(\"ACTION_NAME\", item.name);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_dates, 'o valor da propriedade end_dates não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause, 'o valor da propriedade cause não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.reasons, 'o valor da propriedade reasons não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause_root, 'o valor da propriedade cause_root não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkActionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/actions_by_area?area_id={{AREA_ID}}&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"actions_by_area"
							],
							"query": [
								{
									"key": "area_id",
									"value": "{{AREA_ID}}"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_by_area?area_id={{AREA_ID}}&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_by_area"
									],
									"query": [
										{
											"key": "area_id",
											"value": "{{AREA_ID}}"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 16 Mar 2023 14:33:04 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Actions By Responsible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');",
									"",
									"    function checkActionProperties(action, index, array) {",
									"        pm.expect(action, 'plano de ação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'situation', 'start_date', 'end_dates', 'cause', 'reasons', 'cause_root', 'observation', 'responsible', 'area', 'indicator', 'files');",
									"        pm.expect(action.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"        pm.expect(action.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"        pm.expect(action.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    }",
									"    ",
									"    (responseJson.results).forEach(checkActionProperties);",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count, 'O valor retornado não é do tipo number').to.be.an(\"number\");",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");",
									"",
									"    function checkActionTypes(item, index, array) {",
									"        if (index === 0) {",
									"            pm.environment.set(\"ACTION_ID\", item.id);",
									"            pm.environment.set(\"ACTION_NAME\", item.name);",
									"        }",
									"",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.end_dates, 'o valor da propriedade end_dates não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause, 'o valor da propriedade cause não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.reasons, 'o valor da propriedade reasons não é do tipo array').to.be.a(\"array\");",
									"        pm.expect(item.cause_root, 'o valor da propriedade cause_root não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"    }",
									"    (responseJson.results).forEach(checkActionTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/actions_by_responsible?responsible_id=15&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"actions_by_responsible"
							],
							"query": [
								{
									"key": "responsible_id",
									"value": "15"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_by_responsible?responsible_id=15&page=1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_by_responsible"
									],
									"query": [
										{
											"key": "responsible_id",
											"value": "15"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 16 Mar 2023 14:48:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Create Action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomLoremWord}}",
									"type": "text"
								},
								{
									"key": "responsible_id",
									"value": "{{MEMBER_ID}}",
									"type": "text"
								},
								{
									"key": "situation",
									"value": "NÃO INICIADA",
									"type": "text"
								},
								{
									"key": "start_date",
									"value": "2023-02-10T17:42:11.221Z",
									"type": "text"
								},
								{
									"key": "end_dates",
									"value": "2023-02-15T17:42:11.221Z,2023-02-20T17:42:11.221Z",
									"type": "text"
								},
								{
									"key": "cause",
									"value": "{{$randomLoremSentences}}",
									"type": "text"
								},
								{
									"key": "reasons",
									"value": "{{$randomLoremWord}},{{$randomLoremWord}}",
									"type": "text"
								},
								{
									"key": "cause_root",
									"value": "{{$randomLoremWord}}",
									"type": "text"
								},
								{
									"key": "area_id",
									"value": "{{AREA_ID}}",
									"type": "text"
								},
								{
									"key": "indicator_id",
									"value": "{{INDICATOR_ID}}",
									"type": "text"
								},
								{
									"key": "observation",
									"value": "{{$randomLoremSentences}}",
									"type": "text"
								},
								{
									"key": "files",
									"type": "file",
									"src": [
										"/Users/deway/Documents/sapyo-mock-api/assets/image_1_test_mock.jpg",
										"/Users/deway/Documents/sapyo-mock-api/assets/image_2_test_mock.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/actions/create_action",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"create_action"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/create_action",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"create_action"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:44:11 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/create_action",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"create_action"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-CbJfYPsfKWJwOmTWQcp/2wJKfaU\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:46:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"responsável não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/create_action",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"create_action"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:47:11 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/create_action",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"create_action"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-Cg06b4PXBHSCK/buIwyO7NJwabE\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:47:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/create_action",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"create_action"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "58"
								},
								{
									"key": "ETag",
									"value": "W/\"3a-g0QTLyfn0UKDUd0mIQ+TXa0ql9g\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:52:55 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Update Action By ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action_id",
									"value": "{{ACTION_ID}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{$randomLoremWord}}",
									"type": "text"
								},
								{
									"key": "responsible_id",
									"value": "{{MEMBER_ID}}",
									"type": "text"
								},
								{
									"key": "situation",
									"value": "NÃO INICIADA",
									"type": "text"
								},
								{
									"key": "start_date",
									"value": "2023-02-10T17:42:11.221Z",
									"type": "text"
								},
								{
									"key": "end_dates",
									"value": "2023-02-15T17:42:11.221Z,2023-02-20T17:42:11.221Z",
									"type": "text"
								},
								{
									"key": "cause",
									"value": "{{$randomLoremSentences}}",
									"type": "text"
								},
								{
									"key": "reasons",
									"value": "{{$randomLoremWord}},{{$randomLoremWord}}",
									"type": "text"
								},
								{
									"key": "cause_root",
									"value": "{{$randomLoremWord}}",
									"type": "text"
								},
								{
									"key": "area_id",
									"value": "{{AREA_ID}}",
									"type": "text"
								},
								{
									"key": "indicator_id",
									"value": "{{INDICATOR_ID}}",
									"type": "text"
								},
								{
									"key": "observation",
									"value": "{{$randomLoremSentences}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/actions/update_action_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"update_action_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/update_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"update_action_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 01:59:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/update_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"update_action_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "55"
								},
								{
									"key": "ETag",
									"value": "W/\"37-9TcEgVT/wE0i+IkrxCZOplAbKqo\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:01:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/update_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"update_action_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-CbJfYPsfKWJwOmTWQcp/2wJKfaU\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:02:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"responsável não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/update_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"update_action_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "ETag",
									"value": "W/\"2d-mlmcNNGNlj9LpDczvsHJ6z3pF5M\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:02:46 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"área não foi encontrada.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/update_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"update_action_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "ETag",
									"value": "W/\"31-Cg06b4PXBHSCK/buIwyO7NJwabE\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:03:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 409",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/update_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"update_action_by_id"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "58"
								},
								{
									"key": "ETag",
									"value": "W/\"3a-g0QTLyfn0UKDUd0mIQ+TXa0ql9g\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:06:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação com nome já existente.\"\n}"
						}
					]
				},
				{
					"name": "Action By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson.action, 'plano de ação não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name', 'situation', 'start_date', 'end_dates', 'cause', 'reasons', 'cause_root', 'observation', 'responsible', 'area', 'indicator', 'files');",
									"    pm.expect(responseJson.action.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');",
									"    pm.expect(responseJson.action.indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"    pm.expect(responseJson.action.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto reunião\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson.action.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.action.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.situation, 'o valor da propriedade situation não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.start_date, 'o valor da propriedade start_date não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.end_dates, 'o valor da propriedade end_dates não é do tipo array').to.be.a(\"array\");",
									"    pm.expect(responseJson.action.cause, 'o valor da propriedade cause não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.reasons, 'o valor da propriedade reasons não é do tipo array').to.be.a(\"array\");",
									"    pm.expect(responseJson.action.cause_root, 'o valor da propriedade cause_root não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.observation, 'o valor da propriedade observation não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.action.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.action.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");",
									"    pm.expect(responseJson.action.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");",
									"    pm.expect(responseJson.action.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");",
									"    pm.expect(responseJson.action.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/action_by_id?action_id={{ACTION_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"action_by_id"
							],
							"query": [
								{
									"key": "action_id",
									"value": "{{ACTION_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/action_by_id?action_id=99",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"action_by_id"
									],
									"query": [
										{
											"key": "action_id",
											"value": "99"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "ETag",
									"value": "W/\"35-miKQnJkvqspPd5et/ua2iYhLB8s\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:10:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/action_by_id?action_id=99",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"action_by_id"
									],
									"query": [
										{
											"key": "action_id",
											"value": "99"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "55"
								},
								{
									"key": "ETag",
									"value": "W/\"37-9TcEgVT/wE0i+IkrxCZOplAbKqo\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:09:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Delete Action By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);",
									"});",
									"",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');",
									"});",
									"",
									"pm.test(\"Verifica os tipos do objeto response\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"action_id\":  \"{{ACTION_ID}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/actions/delete_action_by_id",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"delete_action_by_id"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"action_id\":  \"{{ACTION_ID}}\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/actions/delete_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"delete_action_by_id"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "ETag",
									"value": "W/\"34-DPb0E9ArnjVtAOdxuUt1Y39HO/s\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:11:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida\"\n}"
						},
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"action_id\": 99 }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/actions/delete_action_by_id",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"delete_action_by_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "55"
								},
								{
									"key": "ETag",
									"value": "W/\"37-9TcEgVT/wE0i+IkrxCZOplAbKqo\""
								},
								{
									"key": "Date",
									"value": "Thu, 09 Feb 2023 02:11:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Action PDF By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/action_pdf_by_id?action_id={{ACTION_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"action_pdf_by_id"
							],
							"query": [
								{
									"key": "action_id",
									"value": "{{ACTION_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/action_pdf_by_id?action_id=394116642",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"action_pdf_by_id"
									],
									"query": [
										{
											"key": "action_id",
											"value": "394116642"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "55"
								},
								{
									"key": "ETag",
									"value": "W/\"37-9TcEgVT/wE0i+IkrxCZOplAbKqo\""
								},
								{
									"key": "Date",
									"value": "Fri, 17 Feb 2023 12:22:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Actions PDF By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actions/actions_pdf_by_id?actions_id[]={{ACTION_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actions",
								"actions_pdf_by_id"
							],
							"query": [
								{
									"key": "actions_id[]",
									"value": "{{ACTION_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_pdf_by_id?actions_id[]=4414224811&actions_id[]=2799157985&actions_id[]=408205913123",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_pdf_by_id"
									],
									"query": [
										{
											"key": "actions_id[]",
											"value": "4414224811"
										},
										{
											"key": "actions_id[]",
											"value": "2799157985"
										},
										{
											"key": "actions_id[]",
											"value": "408205913123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "55"
								},
								{
									"key": "ETag",
									"value": "W/\"37-9TcEgVT/wE0i+IkrxCZOplAbKqo\""
								},
								{
									"key": "Date",
									"value": "Fri, 17 Feb 2023 12:29:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação não foi encontrado.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Results",
			"item": [
				{
					"name": "Results PDF By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/result_pdf_by_id?indicator_id={{INDICATOR_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"result_pdf_by_id"
							],
							"query": [
								{
									"key": "indicator_id",
									"value": "{{INDICATOR_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/actions/actions_pdf_by_id?actions_id[]=4414224811&actions_id[]=2799157985&actions_id[]=408205913123",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"actions",
										"actions_pdf_by_id"
									],
									"query": [
										{
											"key": "actions_id[]",
											"value": "4414224811"
										},
										{
											"key": "actions_id[]",
											"value": "2799157985"
										},
										{
											"key": "actions_id[]",
											"value": "408205913123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "55"
								},
								{
									"key": "ETag",
									"value": "W/\"37-9TcEgVT/wE0i+IkrxCZOplAbKqo\""
								},
								{
									"key": "Date",
									"value": "Fri, 17 Feb 2023 12:29:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"plano de ação não foi encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Upload de planilha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson, 'Algum elemento não é do tipo objeto ou está faltando alguma chave').to.be.an('object').to.include.all.keys('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson.message, 'o valor da propriedade message não é do tipo string').to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "indicator_id",
									"value": "{{INDICATOR_ID}}",
									"type": "text"
								},
								{
									"key": "sheet",
									"type": "file",
									"src": "/Users/deway/Downloads/record_test_mock.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/results/upload_sheet",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"upload_sheet"
							]
						}
					},
					"response": [
						{
							"name": "STATUS 404",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "indicator_id",
											"value": "{{INDICATOR_ID}}",
											"type": "text"
										},
										{
											"key": "planilha",
											"type": "file",
											"src": "/C:/Users/djdet/Downloads/Resultados_RH-DP.xlsx - Página1.csv"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/results/upload_sheet",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"results",
										"upload_sheet"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"indicador não foi encontrado.\"\n}"
						},
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "indicator_id",
											"value": "{{INDICATOR_ID}}",
											"type": "text"
										},
										{
											"key": "planilha",
											"type": "file",
											"src": "/C:/Users/djdet/Downloads/Resultados_RH-DP.xlsx - Página1.csv"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/results/upload_sheet",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"results",
										"upload_sheet"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"apenas gerentes e responsaveis pelo indicador podem inserir dados\"\n}"
						}
					]
				},
				{
					"name": "Results By Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');\r",
									"\r",
									"    function checkObjectProperties(indicator, index, array) {\r",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id', 'sublevels', 'action', 'goal', 'done', 'done_percentage', 'linear_trend');\r",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');\r",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');\r",
									"    }\r",
									"    \r",
									"    (responseJson.results).forEach(checkObjectProperties);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");\r",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");\r",
									"\r",
									"    function checkObjectTypes(item, index, array) {\r",
									"        if (index === (array.length) -1) {\r",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");\r",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.sublevels, 'o valor da propriedade sublevels não é do tipo array').to.be.a(\"array\");\r",
									"    }\r",
									"    (responseJson.results).forEach(checkObjectTypes);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/results_by_page?page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"results_by_page"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Results By Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');\r",
									"\r",
									"    function checkObjectProperties(indicator, index, array) {\r",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id', 'sublevels', 'action', 'goal', 'done', 'done_percentage', 'linear_trend');\r",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');\r",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');\r",
									"    }\r",
									"    \r",
									"    (responseJson.results).forEach(checkObjectProperties);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");\r",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");\r",
									"\r",
									"    function checkObjectTypes(item, index, array) {\r",
									"        if (index === (array.length) -1) {\r",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");\r",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.sublevels, 'o valor da propriedade sublevels não é do tipo array').to.be.a(\"array\");\r",
									"    }\r",
									"    (responseJson.results).forEach(checkObjectTypes);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/results_by_search?page=1&text=4",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"results_by_search"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "text",
									"value": "4"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Results By Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');\r",
									"\r",
									"    function checkObjectProperties(indicator, index, array) {\r",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id', 'sublevels', 'action', 'goal', 'done', 'done_percentage', 'linear_trend');\r",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');\r",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');\r",
									"    }\r",
									"    \r",
									"    (responseJson.results).forEach(checkObjectProperties);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");\r",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");\r",
									"\r",
									"    function checkObjectTypes(item, index, array) {\r",
									"        if (index === (array.length) -1) {\r",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");\r",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.sublevels, 'o valor da propriedade sublevels não é do tipo array').to.be.a(\"array\");\r",
									"    }\r",
									"    (responseJson.results).forEach(checkObjectTypes);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/results_by_date?date_start=2023-03-01T03:00:00.000Z&date_end=2023-03-31T03:00:00.000Z&page=1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"results_by_date"
							],
							"query": [
								{
									"key": "date_start",
									"value": "2023-03-01T03:00:00.000Z"
								},
								{
									"key": "date_end",
									"value": "2023-03-31T03:00:00.000Z"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Results By Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');\r",
									"\r",
									"    function checkObjectProperties(indicator, index, array) {\r",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id', 'sublevels', 'action', 'goal', 'done', 'done_percentage', 'linear_trend');\r",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');\r",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');\r",
									"    }\r",
									"    \r",
									"    (responseJson.results).forEach(checkObjectProperties);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");\r",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");\r",
									"\r",
									"    function checkObjectTypes(item, index, array) {\r",
									"        if (index === (array.length) -1) {\r",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");\r",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.sublevels, 'o valor da propriedade sublevels não é do tipo array').to.be.a(\"array\");\r",
									"    }\r",
									"    (responseJson.results).forEach(checkObjectTypes);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/results_by_unit?page=1&unit=DIAS",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"results_by_unit"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "unit",
									"value": "DIAS"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Results By Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');\r",
									"\r",
									"    function checkObjectProperties(indicator, index, array) {\r",
									"        pm.expect(indicator, 'indicador não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('name', 'unit_measurement', 'goals', 'criterion', 'responsible', 'area', 'parent', 'id', 'sublevels', 'action', 'goal', 'done', 'done_percentage', 'linear_trend');\r",
									"        pm.expect(indicator.responsible, 'responsável não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'first_name', 'last_name');\r",
									"        pm.expect(indicator.area, 'área não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');\r",
									"    }\r",
									"    \r",
									"    (responseJson.results).forEach(checkObjectProperties);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto membros\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");\r",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");\r",
									"\r",
									"    function checkObjectTypes(item, index, array) {\r",
									"        if (index === (array.length) -1) {\r",
									"            pm.environment.set(\"INDICATOR_ID\", item.id);\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.unit_measurement, 'o valor da propriedade unit_measurement não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.goals, 'o valor da propriedade goals não é do tipo array').to.be.a(\"array\");\r",
									"        pm.expect(item.criterion, 'o valor da propriedade criterion não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible, 'o valor da propriedade responsible não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.responsible.id, 'o valor da propriedade responsible.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.responsible.first_name, 'o valor da propriedade responsible.first_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.responsible.last_name, 'o valor da propriedade responsible.last_name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.area, 'o valor da propriedade area não é do tipo object').to.be.a(\"object\");\r",
									"        pm.expect(item.area.id, 'o valor da propriedade area.id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.area.name, 'o valor da propriedade area.name não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.sublevels, 'o valor da propriedade sublevels não é do tipo array').to.be.a(\"array\");\r",
									"    }\r",
									"    (responseJson.results).forEach(checkObjectTypes);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/results_by_area?page=1&area_id={{AREA_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"results_by_area"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "area_id",
									"value": "{{AREA_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				},
				{
					"name": "Records In Last Year By Indicator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status da requisição é 200\", () => {\r",
									"    pm.expect(pm.response.code, 'Código da requisição diferente de 200').to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica as propriedades do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'response não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').that.has.all.keys('count', 'next', 'previous', 'results');\r",
									"\r",
									"    function checkResultsProperties(results, index, array) {\r",
									"        pm.expect(results, 'results não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'result_date', 'value', 'description', 'indicator');\r",
									"        pm.expect(results.indicator, 'results não é do tipo objeto ou está faltando alguma chave dentro do objeto').to.be.an('object').to.include.all.keys('id', 'name');\r",
									"    }\r",
									"    \r",
									"    (responseJson.results).forEach(checkResultsProperties);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica os tipos do objeto\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson, 'O valor retornado não é do tipo object').to.be.an(\"object\");\r",
									"    pm.expect(responseJson.count, 'o valor da propriedade count não é do tipo number').to.be.a(\"number\");\r",
									"    pm.expect(responseJson.results, 'O valor retornado não é do tipo array').to.be.an(\"array\");\r",
									"\r",
									"\r",
									"    function checkResultsTypes(item, index, array) {\r",
									"        if (index === (array.length) - 1) {\r",
									"            pm.environment.set(\"RESULT_ID\", item.id);\r",
									"        }\r",
									"\r",
									"        pm.expect(item.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.result_date, 'o valor da propriedade result_date não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.value, 'o valor da propriedade value não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.description, 'o valor da propriedade description não é do tipo string').to.be.a(\"string\");\r",
									"        pm.expect(item.indicator, 'o valor da propriedade indicator não é do tipo object').to.be.a(\"object\");\r",
									"    }\r",
									"    \r",
									"        function checkIndicatorTypes(item, index, array) {\r",
									"\r",
									"        pm.expect(item.indicator.id, 'o valor da propriedade id não é do tipo number').to.be.a(\"number\");\r",
									"        pm.expect(item.indicator.name, 'o valor da propriedade name não é do tipo string').to.be.a(\"string\");\r",
									"    }\r",
									"\r",
									"    (responseJson.results).forEach(checkResultsTypes);\r",
									"    (responseJson.results).forEach(checkIndicatorTypes);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{TOKEN_AUTH}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/results/records_last_year_by_indicator?indicator_id={{INDICATOR_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"results",
								"records_last_year_by_indicator"
							],
							"query": [
								{
									"key": "indicator_id",
									"value": "{{INDICATOR_ID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "STATUS 401",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token de autenticação inválida.\"\n}"
						}
					]
				}
			]
		}
	]
}